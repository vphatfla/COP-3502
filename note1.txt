Dynamic Memory Allocation

KNowns as compile time.

stack memory
    int value;
    int ar[21]

dynamic  -- in heap memory
reason to use dynamic allocated memory use when
    1. dont know how much memory i need
    2. too much
    3. want the memory to resist after the fucntion that creates it dumped /// the memory survived 
in case of wanting to create an array size n,, use malloc to RESERVE the memory
int* arr = malloc(<size> * n);   // come from heap
->> arr is [<0> , <1> , <2>, ... <n-1>, <n>]

when you done, free the array by
    free(arr);

calloc
    malloc == for all purpose, either array or single item

    calloc == for array

    calloc( #items, #size of item)
    example: int* scores = calloc(n, sizeof(int));


realloc
    given an array of values[5]

    now need a new element to add the 6th value

    one way: double size when full, and downside double when 1/4 empty

    others: values = realloc(values, 2*n*sized(int)); //n = the old size
    realloc(pointer,0) is equivalent to free(pointer);

array of string
    char** words = calloc(n, sizeof(char*));

    for each string, read into a buffer, then transfer from buffer to words[i]

    for (int i = 0; i<n; i+=1) {
        scanf("os",temp);
        int len = strlen(trmp);
        len+1 for null at the end????
        words[i] = calloc(len+1, sizeof(char));
        strcpy(words[i], temp);
    }